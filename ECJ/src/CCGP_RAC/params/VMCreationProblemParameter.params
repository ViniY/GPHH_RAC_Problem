parent.0 = koza.params

# We have one function set, of class GPFunctionSet
gp.fs.size = 1
gp.fs.0 = ec.gp.GPFunctionSet

# We'll call the function set "f0"
gp.fs.0.name = f0

#breed.elite.0 = 10


# Problem specific parameters
#PMCPU               = 3300
#PMMEM               = 4000
PMENERGY            = 135
VMCPUOverheadRate   = 0.1
VMMemOverhead       = 200
k                   = 0.7

readFileStartFrom   = 0
readFileEnd         = 50

pmConfigPath =
testCasePath        = /home/tanboxi/IdeaProjects/MaxTan/data/containerData/Container200_REALWORLD_SMALL/testCase
osPath              = /home/tanboxi/IdeaProjects/MaxTan/data/OSData/OS2Container200/testCase
vmConfigPath        = /home/tanboxi/IdeaProjects/MaxTan/data/baseConfig/VMConfig/VMConfig_xSmall.csv
osProPath           = /home/tanboxi/IdeaProjects/MaxTan/data/OSPro/OS2/probability.csv
benchmarkPath       = /home/tanboxi/IdeaProjects/MaxTan/data/benchmark/realworld/subEnergy.csv
initEnvPath         = /home/tanboxi/IdeaProjects/MaxTan/data/InitEnv/OS2/Container200_REALWORLD_SMALL/

# We have nine functions in the function set. They are:
gp.fs.0.size =11
gp.fs.0.func.0 = CCGP_RAC.algorithm.function.Add
gp.fs.0.func.0.nc = nc2
gp.fs.0.func.1 = CCGP_RAC.algorithm.function.Mul
gp.fs.0.func.1.nc = nc2
gp.fs.0.func.2 = CCGP_RAC.algorithm.function.Sub
gp.fs.0.func.2.nc = nc2
gp.fs.0.func.3 = CCGP_RAC.algorithm.function.ProtectedDiv
gp.fs.0.func.3.nc = nc2
gp.fs.0.func.4 = CCGP_RAC.algorithm.function.LT
gp.fs.0.func.4.nc = nc2
gp.fs.0.func.5 = CCGP_RAC.algorithm.function.Min
gp.fs.0.func.5.nc = nc2
gp.fs.0.func.6 = CCGP_RAC.algorithm.function.Max
gp.fs.0.func.6.nc = nc2

gp.fs.0.func.7 = CCGP_RAC.algorithm.terminals.features.VmCPU
gp.fs.0.func.7.nc = nc0
gp.fs.0.func.8 = CCGP_RAC.algorithm.terminals.features.VmMem
gp.fs.0.func.8.nc = nc0
gp.fs.0.func.9 = CCGP_RAC.algorithm.terminals.features.VMCPUOverhead
gp.fs.0.func.9.nc = nc0
gp.fs.0.func.10 = CCGP_RAC.algorithm.terminals.features.VMMemOverhead
gp.fs.0.func.10.nc = nc0


pop.subpop.0.size = 1024

# my own GPIndividual
pop.subpop.0.species.ind = main.MYGPIndividual

# my selection choice
gp.koza.xover.source.0 = ec.select.TournamentSelection

# mutation source is from FitProportionateSelection
# gp.koza.mutate.source.0 = ec.select.FitProportionateSelection
gp.koza.mutate.source.0 = ec.select.TournamentSelection

# Reproduction will use Tournament Selection
breed.reproduce.source.0 = ec.select.TournamentSelection

# mutation maxdepth
gp.koza.mutate.maxdepth = 7

pop.subpop.0.species.pipe.num-sources = 3
pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.8
pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.1
pop.subpop.0.species.pipe.source.2 = ec.gp.koza.MutationPipeline
pop.subpop.0.species.pipe.source.2.prob = 0.1

# cross maxdepth = 7
gp.koza.xover.maxdepth = 7

#
gp.koza.half.max-depth = 2

# unless he overrided them locally.
# I am not sure about these two parameters
gp.koza.grow.min-depth = 5
gp.koza.grow.max-depth = 5

generations = 100

select.tournament.size = 7
eval.problem = CCGP_RAC.algorithm.ContainerAllocationProblem
eval.problem.data = CCGP_RAC.algorithm.function.DoubleData

# full statistics
#stat = ec.gp.koza.KozaShortStatistics
#stat.child.0.do-depth = true
#stat.child.0.do-size = true
stat.num-children = 1
stat.child.0 = ec.gp.koza.KozaShortStatistics
stat.child.0.do-depth = true
stat.child.0.do-size = true
stat.child.0.file = /home/yuyong1/Desktop/GP_RAC_Problem/ECJ/src/CCGP_RAC/out

# output statistics to the file
# the run was started in
#stat.file                   $out.stat